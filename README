plomrogue
=========

plomlompom tries to build his own roguelike. It doesn't do much yet (although
plomlompom has insanely ambitious long-term plans).

You can move around a player on an island and meet different enemies. You have 5
hitpoints to lose before death. Enemies start with different amounts of
hitpoints, depending on their species. Dead enemies become dirt, skeletons, or
food to consume (each turn reduces one's "satiation", and the further away from
a healthy center it is, the smaller the chance of regaining lost hitpoints by
healing, and the stronger the chance of suffering from hunger or  overfeeding
and thereby losing hitpoints). Note that different kinds of movements/actions
take different numbers of turns to finish.

Enemies' AI is very dumb so far: Each turn, they look out for actors of
different species to flee from (if their type starts out with more hitpoints
than they have) or (if the opposite is the case) move towards for purposes of
attack. If they see no enemy, they search for and consume "magic meat".

Every move of yours re-writes a file "save" that describes the new state of the
world, if more than 15 seconds have passed since its last writing. Once you
re-start the game, the game state is recreated from the "save" file. To
start over in a new world, simply delete this file.

System requirements / installation / running the game
-----------------------------------------------------

The game is expected to run:
- on Unix systems with a vt100-like terminal environment (xterm will do)
- that contain the ncurses library
- and Python3 (version >= 3.2.3).

To build it, this is furthermore necessary:
- gcc (version >= 4.7.2); some llvm masked as gcc was tested successfully on OSX
- libc library headers (libc6-dev?)

To build and start, do the following steps:

$ ./build.sh
$ ./roguelike

./roguelike is a shell script that executes a union of ./roguelike-server and
./roguelike-client, with the server as a background job. You may ignore the
script and start either or both of the two by hand if you please.

Save files, replay game recording, starting over
------------------------------------------------

By default, the game state is saved in the file ./save, and read from there on
(server) restart. Another file name to use can be given with the -l option (i.e.
start the game with "./roguelike -l alternate_savefile"). To start over in a new
world, remove ./save, or use the -l option with the name of a file that does not
exist yet.

Once you start a new world, every game action of yours is appended to a file
called "record_" plus the save file name. Run "./roguelike -s" to watch the
current game's recording from the beginning. Hit any player action key to
increment turns (they will not trigger the actions usually mapped to them, only
repeat the actions done at that point in the game as defined in the record
file). Other keys do their usual thing.

Append a number to the -s option (like "-s100") to start the recording playback
at the respective turn number. (Don't forget to delete / empty a game's record
file when deleting its save file, or different game's moves will get mixed up in
one record file.)

Hacking / server internals and configuration
--------------------------------------------

The game world is set up and made subject to player commands by
./roguelike-server. It's controlled by commands explained in the file
./SERVER_COMMANDS. The server usually reads these from the files ./server/in
(written to by ./roguelike-client), ./confserver/world, ./record_save and
./save.

The ./roguelike-server executable can be run with a -v option for possibly
helpful debugging info (mostly: what messages the client sends to the server).

Server and client communicate via files in the ./server/ directory (generated
when the server is first run). The ./server/in file is read by the server for
newline-delimited commands. The ./server/out file contains server messages to be
read by clients. The ./server/worldstate file contains a serialized
representation of the game world's data as it is to be visible to the player /
the player's client.
