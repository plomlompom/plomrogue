7DRL 2015 project: Please the Island God
========================================

Description
-----------

See <http://www.plomlompom.de/PlomRogue/plomwiki.php?title=7DRL2015Day2>
and <http://www.plomlompom.de/PlomRogue/plomwiki.php?title=7DRL2015Day3>.

System requirements / installation / running the game
-----------------------------------------------------

The game is expected to run:
- on Unix systems with a vt100-like terminal environment (xterm will do)
- that contain the ncurses library
- and Python3 (version >= 3.2.3).

To build it, this is furthermore necessary:
- gcc (version >= 4.7.2); some llvm masked as gcc was tested successfully on OSX
- libc library headers (libc6-dev?)
- ncurses library headers (libncurses5-dev?)

To build and start, do the following steps:

$ ./redo
$ ./roguelike

(If you got a version of djb's redo build system installed and in your $PATH,
you could also do a simple "redo" instead of "./redo". The ./redo script calls a
simple partial shell script implementation of redo stored below
./build/redo_scripts/, written by Nils Dagsson Moskopp a.k.a. erlehmann.)

There are two executables ./roguelike-server and ./roguelike-client.
./roguelike is a pre-existing shell script that merely executes both of them,
with the server as a background job. You can also ignore the script and start
any of the two by hand.

Keybindings
-----------

a - let AI decide move

w - move north-west
e - move north-east
s - move west
d - move east
x - move south-west
c - move south-east

w - wait one turn

l - toggle "look" mode, investigate map cells by moving a cursor over the map
    instead of the player avatar

p - pick up item
D - drop item selected in inventory
u - use item selected in inventory

Up - navigate upwards in inventory
Down - navigate downwards in inventory

PgUp - scroll upwards in "Things here" window
PgDn - scroll downwards in "Things here" window

Save files, replay game recording, starting over
------------------------------------------------

By default, the game state is saved in the file ./save, and read from there on
(server) restart. Another file name to use can be given with the -l option (i.e.
start the game with "./roguelike -l alternate_savefile"). To start over in a new
world, remove ./save, or use the -l option with the name of a file that does not
exist yet.

Once you start a new world, every game action of yours is appended to a file
called "record_" plus the save file name. Run "./roguelike -s" to watch the
current game's recording from the beginning. Hit any player action key to
increment turns (they will not trigger the actions usually mapped to them, only
repeat the actions done at that point in the game as defined in the record
file). Keys to manage windows, scroll on the map and quit the program do their
usual thing. Append a number to the -s option (like "-s100") to start the
recording playback at the respective turn number. (Don't forget to delete /
empty a game's record file when deleting its save file, or different game's
moves will get mixed up in one record file.)

Hacking / server internals and configuration
--------------------------------------------

The game world is set up and made subject to player commands by
./roguelike-server. It's controlled by commands explained in the file
./SERVER_COMMANDS. The server usually reads these from the files ./server/in
(written to by ./roguelike-client), ./confserver/world, ./record_save and
./save.

All source files are thoroughly documented to explain more details of the
PlomRogue engine's internals. The ./roguelike-server executable can be run with
a -v option for helpful debugging info (mostly: what messages the client sends
to the server). Server and client communicate via files in the ./server/
directory (generated when the server is first run). The ./server/in file is read
by the server for newline-delimited commands. The ./server/out file contains
server messages to be read by clients. The ./server/worldstate file contains a
serialized representation of the game world's data as it is to be visible to
the player / the player's client.

See ./README_engine for more stuff.
