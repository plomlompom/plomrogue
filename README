plomrogue
=========

plomlompom tries to build his own roguelike. It doesn't do much yet (although
plomlompom has insanely ambitious long-term plans).

You can move around a player on an island and meet different enemies. You have 5
hitpoints to lose before death; they start with different amounts of hitpoints,
depending on their species. Dead enemies become dirt, skeletons or "magic meat"
-- such objects can be collected, and "magic meat" can be consumed to gain
hitpoints. Note that different kinds of movements/actions take different numbers
of turns to finish.

Enemies' AI is very dumb so far: Each turn, they try to move towards their
path-wise nearest enemy. If no enemy is found in their surroundings, they just
wait.

Note that diagonal movement is possible, but takes (40%) longer than orthogonal
movement.

Once you start a new world, every move of yours is recorded in a file called
"record". Once you re-start the game, all of your previous moves are replayed
automatically up to the point wherere you left the game. To start over in a new
world, simply delete this file.

System requirements / installation / running the game
-----------------------------------------------------

The game is expected to run on Linux systems that contain the ncurses library.
Do the following steps:

$ git clone https://github.com/plomlompom/plomrogue
$ cd plomrogue
$ make
$ ./roguelike

(It may also work on other Unix-like systems with ncurses, who knows.)

Note that make generates two executables ./roguelike-server and
./roguelike-client. ./roguelike is a pre-existing shell script that merely
executes both of them, with the server as a background job. You can also
ignore the script and start the two by hand.

Client's keybindings and window management
------------------------------------------

In the client's default window configuration, the window appearing on the left
sports a list of keybindings available globally, and additionally via the window
selected as active.

Hit "w" (per default keybindings) to switch the "active" window to a view that
allows changing its geometry. One more hit on "w" switches the window to a view
that allows changing its window-specific keybindings. The global keybindings can
be changed in the "Global keys" window, those of the window geometry
configuration in the "Window geometry keys" window, and those of the
window-specific keybindings configuration in the "Window keybinding keys"
window; by default, these three windows are not visible, but may be turned on by
(per default keybindings) hitting the "F6", "F7" and "F8" keys.

Keybindings and default window selection / visibilities / geometries are read
from the textfile ./confclient/interface_conf by default, or by another one
named by the -i command line option of the client. Some other default window
configurations are stored below ./confclient/single_windows/: "map", "info",
"inventory" and "log". Each of these opens up only a single window into the
client, filling up the entire terminal. This may be useful for running multiple
clients in parallel in multiple terminal windows that can be managed by one's
own window manager choice, instead of relying on plomrogue-client's bizarre
in-client window management.

Replay game recording
---------------------

Run "./roguelike -s" to watch a recording of the current game from the
beginning. Hit any player action key to increment turns (they will not trigger
the actions usually mapped to them, only repeat the actions done at that point
in the game as defined in the "record" file). Keys to manage windows, scroll on
the map and quit the program do their usual thing. Append a number to the -s
option (like "-s100") to start the recording at the respective turn number.

Hacking / server internals and configuration
--------------------------------------------

The movements/actions available to the player and the enemies are defined and
can be changed in ./confserver/map_object_actions. Each entry consists of a
first line of a numerical ID used internally to uniquely identify and manage the
action, a second line of the number of turns the action takes, and a third line
of a string that maps the action to the game logic to do when it is called.
Finally, a delimiter line of "%%" ends the entry.

The different map object types, i.e. species (including the player's human one)
and item types, can be edited in ./confserver/defs. Here the first value is a
numerical ID that represents the object type, the second one describes what type
this object decomposes to when it gets destroyed/killed, the third value is the
ASCII character used to represent the object visually on the map, the fourth
value is the number of hitpoints the object starts with (items are dead and
start with zero hitpoints, anything else moves), the fifth is the string that
names the object in the game log. Finally, the same delimiter as for the map
object action definitions file follows. Note that the only valid item use so
far, consuming "magic meat" to gain hitpoints, is so far hard-coded (this should
change in the future).

All source files are thoroughly documented to explain more details of
plomrogue's internals. The ./roguelike-server executable can be run with a -v
option for helpful debugging info (mostly: what messages the client sends to the
server). Server and client communicate via files in the ./server/ directory
(generated when the server is first run). The ./server/in fifo receives commands
for the server as null-terminated strings. The ./server/out file contains a
serialized representation of the game world's data as it is to be available to
the player / the player's client.
