plomrogue
=========

plomlompom tries to build his own roguelike. It doesn't do much yet (although
plomlompom has insanely ambitious long-term plans).

You can move around a player on an island and meet different enemies. You have 5
hitpoints to lose before death. Enemies start with different amounts of
hitpoints, depending on their species. Dead enemies become dirt, skeletons or
"magic meat" -- such objects can be collected, and "magic meat" can be consumed
to gain hitpoints. Note that different kinds of movements/actions take different
numbers of turns to finish.

Enemies' AI is very dumb so far: Each turn, they try to move towards their
shortest-path-wise nearest enemy. If no enemy is found in their surroundings,
they just wait.

Diagonal movement is possible, but takes (40%) longer than orthogonal movement.

Once you start a new world, every move of yours is recorded in a file called
"record". Once you re-start the game, all of your previous moves are replayed
automatically up to the point wherere you left the game. To start over in a new
world, simply delete this file.

System requirements / installation / running the game
-----------------------------------------------------

The game is expected to run on Linux systems that contain the ncurses library.
Do the following steps:

$ git clone https://github.com/plomlompom/plomrogue
$ cd plomrogue
$ make
$ ./roguelike

(It may also work on other Unix-like systems with ncurses, who knows.)

Make generates two executables ./roguelike-server and ./roguelike-client.
./roguelike is a pre-existing shell script that merely executes both of them,
with the server as a background job. You can also ignore the script and start
the two by hand.

Client's keybindings and window management
------------------------------------------

In the client's default window configuration, the window appearing on the left
sports a list of keybindings available globally, and additionally via the window
selected as active.

Hit "w" (per default keybindings) to switch the "active" window to a view that
allows changing its geometry. One more hit on "w" switches the window to a view
that allows changing its window-specific keybindings. The global keybindings can
be changed in the "Global keys" window, those of the window geometry
configuration in the "Window geometry keys" window, and those of the
window-specific keybindings configuration in the "Window keybinding keys"
window; by default, these three windows are not visible, but may be turned on by
(per default keybindings) hitting the "F6", "F7" and "F8" keys.

Keybindings and default window selection / visibilities / geometries are read
from the textfile ./confclient/interface_conf by default, or by another one
named by the -i command line option of the client. Some other default window
configurations are stored below ./confclient/single_windows/: "map", "info",
"inventory" and "log". Each of these opens up only a single window into the
client, filling up the entire terminal. This may be useful for running multiple
clients in parallel in multiple terminal windows that can be managed by one's
own window manager choice, instead of relying on plomrogue-client's bizarre
in-client window management.

Replay game recording
---------------------

Run "./roguelike -s" to watch a recording of the current game from the
beginning. Hit any player action key to increment turns (they will not trigger
the actions usually mapped to them, only repeat the actions done at that point
in the game as defined in the "record" file). Keys to manage windows, scroll on
the map and quit the program do their usual thing. Append a number to the -s
option (like "-s100") to start the recording at the respective turn number.

Hacking / server internals and configuration
--------------------------------------------

The ./confserver/world file defines the map object types, actions available to
them and the map itself. Each definition consists of a multi-line block wherein
each line sets one attribute of the object type, action or the map.

Here's a typical map definition block:

MAP_TYPE 0
HEIGHT 64
WIDTH 64
DIST_ORTHOGONAL 5
DIST_DIAGONAL 7

A line of "MAP_TYPE" followed by a non-empty token starts the map definition
block. In the future, the second token may differentiate different map types,
but as of right now, only one is available and the value is not interpreted.
The numbers after "HEIGHT" and "WIDTH" give the map's vertical and horizontal
extensions in cells. They must be >= 1 and <= 256. The numbers after
"DIST_ORTHOGONAL" and "DIST_DIAGONAL" define the diagonal movement penalty as
the second value divided by the first. The above values define a penalty ratio
of 7/5 or 1.4, i.e. it takes 40% longer in turns to move diagonally than
orthogonally. Set both to the same value to eliminate the diagonal movement
penalty. A negative penalty to realize weird geometry is possible by setting
"DIST_DIAGONAL" to a lower value than "DIST_ORTHOGONAL". Both values, however,
must be >= 1 and <= 255.

Here's a typical action definition block:

ACTION 1
NAME move
EFFORT 5

A line of "ACTION" followed by a number starts an action definition block and
sets the action's id (must be > 0) for internal use to 1. The number after
"EFFORT" determines how many turns this action takes for the actor performing
it. The string after "NAME" names the action. Furthermore, if it is one of
"move", "pick_up", "drop" or "use", it matches internal functions described by
these strings to this action. All other names (including "wait") currently are
matched to a do-nothing wait function.

Here's a typical map object type definition block: 

OBJECT 2
NAME ZOMBIE
SYMBOL z
LIFEPOINTS 3
CORPSE_ID 5
CONSUMABLE 0
START_NUMBER 9

A line of "OBJECT" followed by a number starts it, and the number sets the
object type's internal id. The number after "CONSUMABLE" defines the object
as consumable (and to so many hitpoints gain). The character after "SYMBOL" is
the one shown on the map to represent to object type. "LIFEPOINTS" is the start
hitpoints value for this object type and defines it as animate if it is
non-zero. The string after "NAME" sets the object type's name. "CORPSE_ID" sets
the id of the object type that objects of this type degrade to if their
hitpoints drop to zero if they start out as inanimate (what is not implemented
yet: or if they are inanimate, but are otherwise crushed). Note that the
"CORPSE_ID" must match the id of an object type defined in the file (before or
after, it may even be the same). "START_NUMBER" sets the number of objects that
are to appear of the given type on the map on game start.

All these definition block members must be present within their blocks, but only
"ACTION" / "OBJECT" / "MAP_TYPE" must be positioned at their respective blocks'
first line; the others may appear in whatever order and even multiple times. If
an object or action definition block is finished, however, it cannot be
re-defined by starting a new block with the same object type or action id.

Tokens in this config file are separated by whitespace. Single quotes can be
put around string values that are to include whitespace by themslves. Note that
all numbers must be decimal representations of unsigned 8 bit integers, i.e.
>= 0 and < 256 and sans preceding "+".

All source files are thoroughly documented to explain more details of
plomrogue's internals. The ./roguelike-server executable can be run with a -v
option for helpful debugging info (mostly: what messages the client sends to the
server). Server and client communicate via files in the ./server/ directory
(generated when the server is first run). The ./server/in file is read by the
server for newline-delimited commands. The ./server/out file contains server
messages to be read by clients. The ./server/worldstate file contains a
serialized representation of the game world's data as it is to be visible to
the player / the player's client.
